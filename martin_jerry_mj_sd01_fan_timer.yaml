# ##################################
# Martin Jerry Dimmer MJ-SD01
# ##################################
# D3 GPIO0: up button (inverted, input_pullup)
# TX GPIO1: down button (inverted, input_pullup)
# RX GPIO3: led5 (inverted)
# D2 GPIO4: red led (inverted)
# D1 GPIO5: led4 (inverted)
# D6 GPIO12: led3 (inverted)
# D7 GPIO13: pwm
# D5 GPIO14: led2 (inverted)
# D8 GPIO15: main button (input_pullup)
# D0 GPIO16: blue led + relay + led1 (inverted)
# ##################################



substitutions:
# https://esphome.io/guides/configuration-types.html#substitutions
  device_name: bathroom_fan   # hostname & entity_id
  friendly_name: Bathroom Fan   # Displayed in HA frontend
  long_press_min: .4s   # minimum time to activate long-press action
  long_press_max: 3s   # maximum time to activate long-press action
  ip_address: !secret upstairs_bathroom_fan_ip   # use /config/esphome/secrets.yaml



esphome:
# https://esphome.io/components/esphome
  name: ${device_name}
  platform: ESP8266
  board: esp01_1m



wifi:
# https://esphome.io/components/wifi
  ssid: !secret wifi_ssid   # use /config/esphome/secrets.yaml
  password: !secret wifi_password   # use /config/esphome/secrets.yaml
  manual_ip:
    static_ip: ${ip_address}
    gateway: !secret wifi_gateway   # use /config/esphome/secrets.yaml
    subnet: !secret wifi_subnet   # use /config/esphome/secrets.yaml
    dns1: !secret wifi_dns1   # use /config/esphome/secrets.yaml
  ap:
    ssid: ${friendly_name} E-AP
    password: !secret esphome_ap_password   # use /config/esphome/secrets.yaml



captive_portal:
# https://esphome.io/components/captive_portal.html



# web_server:
# # https://esphome.io/components/web_server.html
#   port: 80



logger:
# https://esphome.io/components/logger
  baud_rate: 0



api:
# https://esphome.io/components/api
  password: !secret esphome_api_password   # use /config/esphome/secrets.yaml



ota:
# https://esphome.io/components/ota
  password: !secret esphome_ota_password   # use /config/esphome/secrets.yaml



binary_sensor:
# https://esphome.io/components/binary_sensor/index.html

  # https://esphome.io/components/binary_sensor/gpio.html
  - platform: gpio
    id: up_button
    name: ${friendly_name} Up Button
    internal: true
    pin: 
      number: GPIO0
      inverted: true
      mode: INPUT_PULLUP
    # https://esphome.io/components/binary_sensor/index.html?highlight=on_press#on-press
    on_press:
      then:
        # https://esphome.io/guides/automations.html
        - lambda: |-
            id(timer_increase).execute();
    # https://esphome.io/components/binary_sensor/index.html#on-click
    on_click:
      min_length: ${long_press_min}
      max_length: ${long_press_max}
      then:
        # https://esphome.io/guides/automations.html
        - lambda: |-
            id(countdown_override) = 1;
            ESP_LOGD("Up button long press detected. Setting countdown_override to ", "%d", id(countdown_override));


  # https://esphome.io/components/binary_sensor/gpio.html
  - platform: gpio
    id: down_button
    name: ${friendly_name} Down Button
    internal: true
    pin: 
      number: GPIO1
      inverted: true
      mode: INPUT_PULLUP
    # https://esphome.io/components/binary_sensor/index.html?highlight=on_press#on-press
    on_press:
      then:
        # https://esphome.io/guides/automations.html
        - lambda: |-
            id(timer_decrease).execute();
    # https://esphome.io/components/binary_sensor/index.html#on-click
    on_click:
      min_length: ${long_press_min}
      max_length: ${long_press_max}
      then:
        # https://esphome.io/guides/automations.html
        - lambda: |-
            // if necessary, set countdown_override=0
            if (id(countdown_override) == 1) {
              id(countdown_override) = 0;
              ESP_LOGD("countdown_override==", "%d", id(countdown_override));
            }
            // if the fan is off, turn it on and set the timer to 10 minutes
            if (id(binary_fan).state == false) {
              id(timer) = 10;
              auto call = id(binary_fan).turn_on();
              call.perform();
            }
            id(timer) = 30;
            ESP_LOGD("Down button long press detected. Setting timer to ", "%d", id(timer));


  # https://esphome.io/components/binary_sensor/gpio.html
  - platform: gpio
    id: main_button
    name: ${friendly_name} Main Button
    internal: true
    pin: 
      number: GPIO15
      mode: INPUT_PULLUP
    # https://esphome.io/components/binary_sensor/index.html?highlight=on_press#on-press
    on_press:
      - fan.toggle: binary_fan



fan:
  # https://esphome.io/components/fan/binary.html
  - platform: binary
    output: pwm_full_lock
    name: ${friendly_name}
    id: binary_fan



globals:
# https://esphome.io/guides/automations.html#bonus-2-global-variables
  - id: timer
    type: int
    restore_value: no
    initial_value: '10'

  - id: countdown_override
    type: int
    restore_value: no
    initial_value: '0'



interval:
# https://esphome.io/guides/automations.html#interval

  # Countdown Timer
  - interval: 1min
    then:
      # https://esphome.io/guides/automations.html
      - lambda: |-
          // if override is disabled
          if (id(countdown_override) == 0) {
            // if the fan is on, decrement the timer
            if (id(binary_fan).state == true) {
              id(timer) -= 1;
              ESP_LOGD("The remaining time is now ", "%d", id(timer));
              // if the timer reaches 0, turn off the fan
              if (id(timer) == 0) {
                auto call = id(binary_fan).turn_off();
                call.perform();
              }
            }
          }

  # Maintain LEDs & Global Variables
  - interval: 250ms
    then:
      # https://esphome.io/guides/automations.html
      - lambda: |-
          // if the fan is on
          if (id(binary_fan).state == true) {
            // if override is disabled
            if (id(countdown_override) == 0) {
              // disable led5, manage the rest of the LEDs according to remaining time
              id(led5).turn_off();
              if (id(timer) >= 31) { id(led4).turn_on(); }
              if (id(timer) < 31) { id(led4).turn_off(); }
              if (id(timer) >= 21) { id(led3).turn_on(); }
              if (id(timer) < 21) { id(led3).turn_off(); }
              if (id(timer) >= 11) { id(led2).turn_on(); }
              if (id(timer) < 11) { id(led2).turn_off(); }
            // if override is enabled, set the LEDs to a unique pattern
            } else {
              // enable led5, disable led4, led3, led2
              id(led5).turn_on();
              id(led4).turn_off();
              id(led3).turn_off();
              id(led2).turn_off();
            }
          // if the fan is off
          } else {
            // if led_ is on, turn it off
            if (id(led5)) { id(led5).turn_off(); }
            if (id(led4)) { id(led4).turn_off(); }
            if (id(led3)) { id(led3).turn_off(); }
            if (id(led2)) { id(led2).turn_off(); }
            // if timer is not 10, set it to 10
            if (id(timer) != 10) { id(timer) = 10; }
            // if override is not 0, set it to 0
            if (id(countdown_override) != 0) { id(countdown_override) = 0; }
          }



output:
  # https://esphome.io/components/output/gpio.html
  - platform: gpio
    pin: GPIO3
    inverted: true
    id: led5

  # https://esphome.io/components/output/gpio.html
  - platform: gpio
    pin: GPIO5
    inverted: true
    id: led4

  # https://esphome.io/components/output/gpio.html
  - platform: gpio
    pin: GPIO12
    inverted: true
    id: led3

  # https://esphome.io/components/output/gpio.html
  - platform: gpio
    pin: GPIO14
    inverted: true
    id: led2

  # https://esphome.io/components/output/esp8266_pwm.html
  # https://esphome.io/components/output/index.html#config-output
  - platform: esp8266_pwm
    pin: GPIO13
    id: pwm_full_lock
    power_supply: relay
    min_power: 1.0



power_supply:
  # https://esphome.io/components/power_supply.html
  - id: relay
    pin: 
      number: GPIO16
      inverted: true
    enable_time: 0s
    keep_on_time: 0s



script:
# https://esphome.io/guides/automations.html?highlight=script#script-execute-action

  - id: timer_increase
    then:
      # https://esphome.io/guides/automations.html
      - lambda: |-
          // if the fan is off, turn it on
          if (id(binary_fan).state == false) {
            auto call = id(binary_fan).turn_on();
            call.perform();
          } else {
            // change the time remaining
            if (id(timer) < 10) { id(timer) = 10; }
            else if (id(timer) >= 10 && id(timer) < 20) { id(timer) = 20; }
            else if (id(timer) >= 20 && id(timer) < 30) { id(timer) = 30; }
            else if (id(timer) >= 30 && id(timer) < 60) { id(timer) = 60; }
            else if (id(timer) == 60) {
              id(countdown_override) = 1;
              ESP_LOGD("countdown_override==", "%d", id(countdown_override));
            }
          }
      - logger.log:
          format: "Up button pressed. The timer value is now %d"
          args: ['id(timer)']


  - id: timer_decrease
    then:
      # https://esphome.io/guides/automations.html
      - lambda: |-
          // if the fan is off, turn it on
          if (id(binary_fan).state == false) {
            auto call = id(binary_fan).turn_on();
            call.perform();
          } else {
            // if override is enabled, disable it
            if (id(countdown_override) == 1) {
              id(countdown_override) = 0;
              ESP_LOGD("Set countdown_override==", "%d", id(countdown_override));
            } else {
              // change the time remaining
              if (id(timer) > 30) { id(timer) = 30; }
              else if (id(timer) <= 30 && id(timer) > 20) { id(timer) = 20; }
              else if (id(timer) <= 20 && id(timer) > 10) { id(timer) = 10; }
              else if (id(timer) <= 10) {
                id(timer) = 0;
                auto call = id(binary_fan).turn_off();
                call.perform();
                ESP_LOGD("Down button pressed. The timer value is now ", "%d", id(timer));
              }
            }
          }



status_led:
# https://esphome.io/components/status_led
  pin:
    number: GPIO4
    inverted: true
